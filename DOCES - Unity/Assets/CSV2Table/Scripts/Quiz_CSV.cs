// This code automatically generated by TableCodeGen
using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public class Quiz_CSV : MonoBehaviour
{

	public TextAsset file;

	void Awake()
	{
		Load(file);
	}


	public class Row
	{
		public string ID;
		public string Description;
		public string Difficulty;
		public string Answer;

	}

	List<Row> rowList = new List<Row>();
	bool isLoaded = false;

	public bool IsLoaded()
	{
		return isLoaded;
	}

	public List<Row> GetRowList()
	{
		return rowList;
	}

	public void Load(TextAsset csv)
	{
		rowList.Clear();
		string[][] grid = Csv_Parser2.Parse(csv.text);
		for(int i = 1 ; i < grid.Length ; i++)
		{
			Row row = new Row();
			row.ID = grid[i][0];
			row.Description = grid[i][1];
			row.Difficulty = grid[i][2];
			row.Answer = grid[i][3];

			rowList.Add(row);
		}
		isLoaded = true;
	}

	public int NumRows()
	{
		return rowList.Count;
	}

	public Row GetAt(int i)
	{
		if(rowList.Count <= i)
			return null;
		return rowList[i];
	}

	public Row Find_ID(string find)
	{
		return rowList.Find(x => x.ID == find);
	}
	public List<Row> FindAll_ID(string find)
	{
		return rowList.FindAll(x => x.ID == find);
	}
	public Row Find_Description(string find)
	{
		return rowList.Find(x => x.Description == find);
	}
	public List<Row> FindAll_Description(string find)
	{
		return rowList.FindAll(x => x.Description == find);
	}
	public Row Find_Difficulty(string find)
	{
		return rowList.Find(x => x.Difficulty == find);
	}
	public List<Row> FindAll_Difficulty(string find)
	{
		return rowList.FindAll(x => x.Difficulty == find);
	}
	public Row Find_Answer(string find)
	{
		return rowList.Find(x => x.Answer == find);
	}
	public List<Row> FindAll_Answer(string find)
	{
		return rowList.FindAll(x => x.Answer == find);
	}


	public List<string> getQuestion(string diff){
		int id = Random.Range (0, FindAll_Difficulty (diff).Count);
		Debug.Log ("Sorteou a Pergunta " + id + " das " + diff );

		List<string> infos = new List<string> ();

		infos.Add (FindAll_Difficulty (diff) [id].ID);
		infos.Add (FindAll_Difficulty (diff) [id].Description);
		infos.Add (FindAll_Difficulty (diff) [id].Answer);

		return infos;

	}


}